name: Deploy to EKS Manually

on:
  workflow_dispatch:  # Allows manual execution from GitHub UI

jobs:
  deploy:
    name: Apply Kubernetes Files
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ vars.DEFAULT_REGION }}

    - name: Install eksctl
      run: |
          # Set architecture and platform
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
      
          # Download eksctl tar.gz file for the platform
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
      
          # (Optional) Verify checksum
          curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
      
          # Extract the tar.gz and move the binary
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
      
          # Move eksctl binary to /usr/local/bin
          sudo mv /tmp/eksctl /usr/local/bin
          # Verify eksctl installation
          eksctl version
    

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    
    
    - name: Verify Helm Installation
      run: helm version

    - name: Update kubeconfig for EKS Cluster
      run: |
        aws eks update-kubeconfig \
          --name "nutrition" \
          --region ${{ vars.DEFAULT_REGION }}

    - name: Fetch VPC ID dynamically
      id: vpc_id_fetch
      run: |
        VPC_ID=$(aws ec2 describe-vpcs --filters Name=tag:Name,Values='main' \
          --query 'Vpcs[0].VpcId' --output text)
        echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

    - name: Update aws-auth ConfigMap
      run: |
            kubectl patch configmap aws-auth -n kube-system --patch '{
              "mapUsers": [
                {
                  "userarn": "${{ secrets.ROOT_ARN }}", 
                  "username": "admin",
                  "groups": ["system:masters"]
                }
              ]
            }'

    - name: Create Kubernetes Secret from Environment Variables
      env:
            MONGO_URI: ${{ secrets.MONGO_URI }}
            BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
            BUCKET_URL: ${{ secrets.BUCKET_URL }}
            AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      run: |
              # Check if the secret already exists
              if ! kubectl get secret aws-credentials --namespace nutrition; then
                # Create the secret with individual key-value pairs
                kubectl create secret generic aws-credentials \
                  --namespace nutrition \
                  --from-literal=MONGO_URI="$MONGO_URI" \
                  --from-literal=BUCKET_NAME="$BUCKET_NAME" \
                  --from-literal=BUCKET_URL="$BUCKET_URL" \
                  --from-literal=AWS_ACCESS_KEY="$AWS_ACCESS_KEY" \
                  --from-literal=AWS_SECRET_KEY="$AWS_SECRET_KEY" \
                  --dry-run=client -o yaml | kubectl apply -f -
              else
                echo "Secret aws-credentials already exists."
              fi
            
    - name: Verify Secret
      run: kubectl describe secret aws-credentials -n nutrition

    - name: Create Custom IAM Policy
      run: |
        curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json
        aws iam create-policy \
        --policy-name AWSLoadBalancerControllerIAMPolicy \
        --policy-document file://iam_policy.json
    
    - name: Create IAM Service Account
      run: |
        eksctl create iamserviceaccount \
        --cluster=nutrition \
        --namespace=kube-system \
        --name=aws-load-balancer-controller \
        --role-name AmazonEKSLoadBalancerControllerRole \
        --attach-policy-arn=arn:aws:iam::${{ secrets.TERRAFORM_USER_ID }}:policy/AWSLoadBalancerControllerIAMPolicy \
        --approve

    - name: Deploy AWS Load Balancer Controller via Helm
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update eks
        helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller \
          --namespace kube-system \
          --set clusterName=nutrition \
          --set region=${{ vars.DEFAULT_REGION }} \
          --set vpcId=${{ env.VPC_ID }} \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller
    

    # - name: Apply AWS Load Balancer Controller Deployment
    #   run: kubectl apply -f aws-load-balancer-controller.yaml
    

    - name: Apply Kubernetes Manifests
      run: |
        kubectl apply -f aws-kubernetes/
