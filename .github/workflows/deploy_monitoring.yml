name: Deploy Grafana and Prometheus for Monitoring

on:
  workflow_dispatch:  # Allows manual execution from GitHub UI

jobs:
  deploy:
    name: Apply Monitoring Tools
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ vars.DEFAULT_REGION }}

    - name: Install eksctl
      run: |
          # Set architecture and platform
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
      
          # Download eksctl tar.gz file for the platform
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
      
          # (Optional) Verify checksum
          curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
      
          # Extract the tar.gz and move the binary
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
      
          # Move eksctl binary to /usr/local/bin
          sudo mv /tmp/eksctl /usr/local/bin
          # Verify eksctl installation
          eksctl version
    

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    
    
    - name: Verify Helm Installation
      run: helm version

    - name: Update kubeconfig for EKS Cluster
      run: |
        aws eks update-kubeconfig \
          --name "nutrition" \
          --region ${{ vars.DEFAULT_REGION }}

    - name: Install Prometheus
      run: |
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

            helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace monitoring --create-namespace
    
    - name: Install Grafana
      run: |
            helm repo add grafana https://grafana.github.io/helm-charts
            helm upgrade --install grafana grafana/grafana \
            --namespace monitoring --set adminPassword=admin \
            --set persistence.enabled=true \
            --set persistence.size=1Gi \
            --set persistence.storageClassName=gp2 \
            --set "service.type=LoadBalancer"


    - name: Configure Prometheus as Grafana DataSource
      run: |
            kubectl apply -f - <<EOF
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: grafana-datasources
              namespace: monitoring
            data:
              prometheus.yaml: |
                apiVersion: 1
                kind: Datasource
                metadata:
                  name: prometheus
                  namespace: monitoring
                spec:
                  access: proxy
                  isDefault: true
                  name: Prometheus
                  type: prometheus
                  url: http://prometheus-server.monitoring.svc.cluster.local
                  jsonData:
                    timeInterval: "15s"
            EOF

    - name: Apply JSON Dashboard to Grafana
      run: |
            DASHBOARD_PATH="aws-kubernetes/monitoring/custom_dashboard.json"

            # Check if the dashboard exists
            if [ -f "$DASHBOARD_PATH" ]; then
            echo "Dashboard found. Applying to Grafana."

            # Apply the dashboard as a ConfigMap
            kubectl create configmap grafana-dashboard \
                --namespace=monitoring \
                --from-file=dashboard.json="$DASHBOARD_PATH" \
                --dry-run=client -o yaml | kubectl apply -f -
            else
            echo "Dashboard file does not exist at $DASHBOARD_PATH"
            exit 1
            fi
